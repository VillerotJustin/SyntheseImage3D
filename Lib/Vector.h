//
// Created by villerot on 17/03/25.
// Documentation generated by ChatGPT
// Based of the work of vraid
// Original was vector 3 only
// https://github.com/vraid/earthgen-old/blob/master/source/math/vector3.h
//

#ifndef VECTOR_H
#define VECTOR_H

#include <vector>

namespace math {

    /**
     * @class Vector
     * @brief A class representing a mathematical vector with various vector operations.
     *
     * This class supports basic vector operations such as addition, subtraction,
     * scalar multiplication, and equality checks. It also includes methods for
     * computing the dot product, cross product (3D), length, distance, and angles
     * between vectors.
     */
    class Vector {
    public:
        /**
        * @brief Constructor that creates a vector of size 'x' with all elements initialized to 0.0.
        * @param x The size of the vector.
        */
        explicit Vector(int);

        /**
         * @brief Constructor that creates a vector of size 'x' with all elements initialized to the given value 'y'.
         * @param x The size of the vector.
         * @param y The value to initialize each element of the vector.
         */
        Vector(int, double);

        /**
         * @brief Constructor that creates a vector from a std::vector of doubles.
         * @param data A vector containing the data to initialize the Vector.
         */
        explicit Vector(std::vector<double>);

        /**
         * @brief Equality operator that compares two vectors.
         * @param v2 The vector to compare with the current vector.
         * @return True if the vectors are equal (element-wise comparison), otherwise false.
         */
        bool operator == (const Vector&) const;

        /**
         * @brief Inequality operator that compares two vectors.
         * @param v2 The vector to compare with the current vector.
         * @return True if the vectors are not equal (element-wise comparison), otherwise false.
         */
        bool operator != (const Vector&) const;

        /**
         * @brief Addition operator that adds two vectors element-wise.
         * @param v2 The vector to add to the current vector.
         * @return A new vector containing the result of the addition.
         * @throws std::invalid_argument if the vectors have different sizes.
         */
        Vector operator + (const Vector&) const;

        /**
         * @brief Subtraction operator that subtracts two vectors element-wise.
         * @param v2 The vector to subtract from the current vector.
         * @return A new vector containing the result of the subtraction.
         * @throws std::invalid_argument if the vectors have different sizes.
         */
        Vector operator - (const Vector&) const;

        /**
        * @brief Scalar multiplication operator that multiplies each element of the vector by a scalar value.
        * @param mult The scalar value to multiply the vector by.
        * @return A new vector containing the result of the multiplication.
        */
        Vector operator * (double) const;

        /**
         * @brief Accessor method to get the value at a specific index.
         * @param n The index of the element to access.
         * @return The value at the specified index.
         */
        [[nodiscard]] inline double at (const int n) const { return values[n]; }

        /**
         * @brief Method to get the size of the vector.
         * @return The number of elements in the vector.
         */
        [[nodiscard]] int size() const {return m_size; }

        /**
         * @brief Function to check if all elements of the vector are zero.
         * @param v The vector to check.
         * @return True if all elements of the vector are zero, otherwise false.
         */
        bool zero () const;

        /**
         * @brief Function to normalize a vector (make its length equal to 1).
         * @param v The vector to normalize.
         * @return A new vector with the same direction but length 1.
         */
        Vector normal () const;

        /**
         * @brief Function to calculate the dot product of two vectors.
         * @param other The second vector.
         * @return The dot product of the two vectors.
         * @throws std::invalid_argument if the vectors are of different sizes.
         */
        double dot (const Vector& other) const;

         /**
         * @brief Function to calculate the length (magnitude) of a vector.
         * @param v The vector.
         * @return The length of the vector.
         */
        double length () const;

        /**
         * @brief Function to calculate the squared length of a vector (without taking the square root).
         * @param v The vector.
         * @return The squared length of the vector.
         */
        double squared_length () const;

        /**
         * @brief Function to calculate the Euclidean distance between two vectors.
         * @param v The first vector.
         * @param u The second vector.
         * @return The distance between the two vectors.
         */
        double distance (const Vector&) const;

        /**
         * @brief Function to calculate the squared Euclidean distance between two vectors.
         * @param v The first vector.
         * @param u The second vector.
         * @return The squared distance between the two vectors.
         */
        double squared_distance (const Vector&) const;
    protected:
        int m_size;                 ///< The number of elements in the vector.
        std::vector<double> values; ///< A vector storing the elements of the vector.
    };
}





#endif //VECTOR_H
