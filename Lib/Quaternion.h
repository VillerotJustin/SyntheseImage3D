//
// Created by villerot on 17/03/25.
// Documentation generated by ChatGPT
// Based of Vraid Code
// https://github.com/vraid/earthgen-old/blob/master/source/math/quaternion.h
//

#ifndef QUATERNION_H
#define QUATERNION_H

#include <array>

namespace math {

    // Forward declarations for other classes
    class Matrix;
    class Vector;

    class Quaternion {
        public:
        /**
         * Default constructor for Quaternion.
         * Initializes the quaternion with all components set to 0.
         */
        Quaternion();

        /**
         * Parameterized constructor for Quaternion.
         * Initializes the quaternion with the specified components.
         *
         * @param w The real component of the quaternion.
         * @param x The first imaginary component of the quaternion.
         * @param y The second imaginary component of the quaternion.
         * @param z The third imaginary component of the quaternion.
         */
        Quaternion(double w, double x, double y, double z);

        /**
         * Overloaded multiplication operator to multiply two quaternions.
         *
         * @param other The quaternion to multiply with.
         * @return A new quaternion that is the result of multiplying this quaternion with `other`.
         */
        Quaternion operator * (const Quaternion& other) const;

        /**
         * Overloaded multiplication operator to rotate a vector by this quaternion.
         *
         * @param v The vector to rotate.
         * @return A new vector that is the result of rotating `v` by this quaternion.
         */
        Vector operator * (const Vector& v) const;

        /**
         * Accessor function to retrieve a specific component of the quaternion.
         *
         * @param n The index of the component (0 to 3, representing w, x, y, z).
         * @return The value of the component at index `n`.
         */
        [[nodiscard]] inline double at(const int n) const { return values[n]; }

    private:
        /**
         * Array holding the four components of the quaternion: [w, x, y, z].
         */
        std::array<double, 4> values;
    };

    /**
     * Creates a quaternion representing a rotation around a given vector by a specified angle.
     *
     * @param axis The vector representing the axis of rotation.
     * @param angle The angle (in radians) to rotate around the axis.
     * @return A quaternion representing the rotation.
     */
    Quaternion rotation_around (const Vector& axis, double angle);

    /**
     * Creates a quaternion representing the rotation between two vectors.
     *
     * @param from The initial vector.
     * @param to The target vector.
     * @return A quaternion that represents the rotation from `from` to `to`.
     */
    Quaternion rotation_between (const Vector& from, const Vector& to);

    /**
     * Computes the conjugate of a quaternion.
     * The conjugate of a quaternion is obtained by flipping the signs of the imaginary components.
     *
     * @param q The quaternion to conjugate.
     * @return The conjugate of the quaternion `q`.
     */
    Quaternion conjugate (const Quaternion& q);

    /**
     * Extracts the vector part (the imaginary part) from a quaternion.
     *
     * @param q The quaternion to extract the vector part from.
     * @return A vector representing the imaginary part of the quaternion.
     */
    Vector vector (const Quaternion& q);

    /**
     * Normalizes a quaternion, scaling it to a unit quaternion (length = 1).
     *
     * @param q The quaternion to normalize.
     * @return The normalized quaternion.
     */
    Quaternion normal (const Quaternion& q);

    /**
     * Converts a quaternion to a 3x3 rotation matrix.
     *
     * @param q The quaternion to convert.
     * @return A 3x3 matrix representing the rotation defined by the quaternion `q`.
     */
    Matrix matrix3 (const Quaternion& q);
}



#endif //QUATERNION_H

