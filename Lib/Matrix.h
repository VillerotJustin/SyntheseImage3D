//
// Created by villerot on 17/03/25.
// Documentation generated by ChatGPT
// Based on akalicki code
// https://github.com/akalicki/matrix
//

#ifndef MATRIX_H
#define MATRIX_H

#include <iostream>

namespace math {
    /**
     * Class representing a matrix, providing various matrix operations
     * such as addition, subtraction, multiplication, inversion, and more.
     */
    class Matrix {
    public:

        // Constructors & destructors

        /**
         * Constructor that initializes a matrix with the specified number of rows and columns.
         *
         * @param rows The number of rows in the matrix.
         * @param cols The number of columns in the matrix.
         */
        Matrix(int rows, int cols);

        /**
         * Constructor that initializes a matrix using a given 2D array.
         *
         * @param a The 2D array containing matrix elements.
         * @param rows The number of rows in the matrix.
         * @param cols The number of columns in the matrix.
         */
        Matrix(double** a, int rows, int cols);

        /**
         * Default constructor that initializes a 1x1 matrix with a value of 0.
         */
        Matrix();

        /**
         * Destructor that deallocates the memory used by the matrix.
         */
        ~Matrix();

        /**
         * Copy constructor that creates a new matrix by copying the values from another matrix.
         *
         * @param other The matrix to copy.
         */
        Matrix(const Matrix& other);

        // Operators

        /**
         * Overloaded operator for element access.
         * Provides access to matrix elements for read-only purposes.
         *
         * @param x Row index.
         * @param y Column index.
         * @return Reference to the matrix element at (x, y).
         */
        inline double& operator()(const int x, const int y) const {return p[x][y]; }

        /**
         * Overloaded assignment operator that copies values from another matrix.
         *
         * @param other The matrix to copy.
         * @return The current matrix after the assignment.
         */
        Matrix& operator=(const Matrix& other);

        /**
         * Overloaded addition assignment operator to add another matrix.
         *
         * @param m The matrix to add.
         * @return The current matrix after addition.
         */
        Matrix& operator+=(const Matrix& m);

        /**
         * Overloaded subtraction assignment operator to subtract another matrix.
         *
         * @param m The matrix to subtract.
         * @return The current matrix after subtraction.
         */
        Matrix& operator-=(const Matrix& m);

        /**
         * Overloaded multiplication assignment operator to multiply by another matrix.
         *
         * @param m The matrix to multiply by.
         * @return The current matrix after multiplication.
         */
        Matrix& operator*=(const Matrix& m);

        /**
         * Overloaded multiplication assignment operator to multiply by a scalar.
         *
         * @param num The scalar value to multiply by.
         * @return The current matrix after multiplication.
         */
        Matrix& operator*=(double num);

        /**
         * Overloaded division assignment operator to divide by a scalar.
         *
         * @param num The scalar value to divide by.
         * @return The current matrix after division.
         */
        Matrix& operator/=(double num);

        /**
         * Overloaded power operator that raises the matrix to the power of `num`.
         *
         * @param num The exponent.
         * @return The matrix raised to the power of `num`.
         */
        Matrix operator^(int num);

        /**
         * Overloaded output stream operator to print the matrix.
         *
         * @param os The output stream.
         * @param m The matrix to print.
         * @return The output stream with the matrix printed.
         */
        friend std::ostream& operator<<(std::ostream& os, const Matrix& m);

        /**
         * Overloaded input stream operator to read a matrix from the input stream.
         *
         * @param is The input stream.
         * @param m The matrix to read into.
         * @return The input stream with the matrix read.
         */
        friend std::istream& operator>>(std::istream& is, Matrix& m);


        /**
         * Swaps two rows of the matrix.
         *
         * @param r1 The index of the first row.
         * @param r2 The index of the second row.
         */
        void swapRows(int r1, int r2);

        /**
         * Returns the transpose of the matrix.
         *
         * @return The transposed matrix.
         */
        Matrix transpose();

        // Static functions

        /**
         * Creates and returns an identity matrix of the specified size.
         *
         * @param size The size of the identity matrix.
         * @return The identity matrix.
         */
        static Matrix createIdentity(int size);

        /**
         * Solves a system of linear equations using Gaussian elimination.
         *
         * @param A The matrix representing the coefficients of the system.
         * @param B The matrix representing the constants.
         * @return The solution matrix.
         */
        static Matrix solve(Matrix A, Matrix B);

        /**
         * Solves a system of linear equations using a banded matrix solver.
         *
         * @param A The matrix representing the coefficients of the system.
         * @param B The matrix representing the constants.
         * @param bandWidth The bandwidth of the matrix.
         * @return The solution matrix.
         */
        static Matrix bandSolve(Matrix A, Matrix B, int bandWidth);

        // functions on vectors

        /**
         * Computes the dot product of two matrices, which are treated as vectors.
         *
         * @param m1 The first matrix (treated as a vector).
         * @param m2 The second matrix (treated as a vector).
         * @return The dot product of the matrices.
         */
        static double dotProduct(Matrix m1, Matrix m2);

        // functions on augmented matrices

        /**
         * Augments two matrices (i.e., appends one to the other).
         *
         * @param A The first matrix.
         * @param B The second matrix to augment.
         * @return The augmented matrix.
         */
        static Matrix augment(Matrix A, Matrix B);

        /**
         * Performs Gaussian elimination on the matrix to put it in row echelon form.
         *
         * @return The matrix after Gaussian elimination.
         */
        Matrix gaussianEliminate();

        /**
         * Reduces the matrix from row echelon form (RREF).
         *
         * @return The matrix in reduced row echelon form.
         */
        Matrix rowReduceFromGaussian();

        /**
         * Reads the solutions from a matrix in RREF and outputs them to the stream.
         *
         * @param os The output stream to write the solutions.
         */
        void readSolutionsFromRREF(std::ostream& os);

        /**
         * Computes the inverse of the matrix.
         *
         * @return The inverse of the matrix.
         */
        Matrix inverse();

    private:
        int rows_, cols_;
        double **p{}; /// Pointer to the 2D array holding the matrix data

        /**
        * Allocates memory for the matrix elements.
        */
        void allocSpace();

        /**
         * Helper function for matrix exponentiation.
         *
         * @param m The matrix to exponentiate.
         * @param num The exponent.
         * @return The matrix raised to the power of `num`.
         */
        Matrix expHelper(const Matrix& m, int num);
    };

    // Non-member functions (operators)

    /**
     * Overloaded addition operator for matrices.
     *
     * @param m1 The first matrix.
     * @param m2 The second matrix.
     * @return The result of adding m1 and m2.
     */
    Matrix operator+(const Matrix& m1, const Matrix& m2);

    /**
     * Overloaded subtraction operator for matrices.
     *
     * @param m1 The first matrix.
     * @param m2 The second matrix.
     * @return The result of subtracting m2 from m1.
     */
    Matrix operator-(const Matrix& m1, const Matrix& m2);

    /**
     * Overloaded multiplication operator for matrices.
     *
     * @param m1 The first matrix.
     * @param m2 The second matrix.
     * @return The result of multiplying m1 by m2.
     */
    Matrix operator*(const Matrix& m1, const Matrix& m2);

    /**
     * Overloaded multiplication operator to multiply a matrix by a scalar.
     *
     * @param m The matrix.
     * @param num The scalar value.
     * @return The result of multiplying m by num.
     */
    Matrix operator*(const Matrix& m, double num);

    /**
    * Overloaded multiplication operator to multiply a scalar by a matrix.
    *
    * @param num The scalar value.
    * @param m The matrix.
    * @return The result of multiplying num by m.
    */
    Matrix operator*(double num, const Matrix& m);

    /**
     * Overloaded division operator to divide a matrix by a scalar.
     *
     * @param m The matrix.
     * @param num The scalar value.
     * @return The result of dividing m by num.
     */
    Matrix operator/(const Matrix& m, double num);

}


#endif //MATRIX_H

