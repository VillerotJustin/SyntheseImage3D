//
// Created by villerot on 17/03/25.
// Documentation generated by ChatGPT
// Based of the work of vraid
// Original was vector 3 only
// https://github.com/vraid/earthgen-old/blob/master/source/math/vector3.cpp
//

#include "Vector.h"

#include <complex>
#include <stdexcept>
#include <utility>

#include "math_common.h"

namespace math {

    // Constructor: Initializes a vector of size 'x' with all elements set to 0.0
    Vector::Vector(const int x) : m_size(x), values(x, 0.0) {}

    // Constructor: Initializes a vector of size 'x' with all elements set to 'y'
    Vector::Vector(const int x, const double y) : m_size(x), values(x, y) {}

    // Constructor: Initializes a vector from a std::vector of doubles
    Vector::Vector(std::vector<double> data) : m_size(data.size()), values(std::move(data)) {}

    // Equality operator: Returns true if two vectors have identical values
    bool Vector::operator==(const Vector& v2) const {
        return values == v2.values;
    }

    // Inequality operator: Returns true if two vectors do not have identical values
    bool Vector::operator!=(const Vector& v2) const {
        return values != v2.values;
    }

    // Addition operator: Adds two vectors element-wise and returns the resulting vector
    Vector Vector::operator + (const Vector& v2) const {
        if (values.size() != v2.values.size()) {
            throw std::invalid_argument("Vectors must be the same size.");
        }

        std::vector<double> result(values.size());
        for (size_t i = 0; i < values.size(); i++) {
            result[i] = values[i] + v2.values[i];
        }
        return Vector(result);
    }

    // Subtraction operator: Subtracts two vectors element-wise and returns the resulting vector
    Vector Vector::operator - (const Vector& v2) const {
        if (values.size() != v2.values.size()) {
            throw std::invalid_argument("Vectors must be the same size.");
        }

        std::vector<double> result(values.size());
        for (size_t i = 0; i < values.size(); i++) {
            result[i] = values[i] - v2.values[i];
        }
        return Vector(result);
    }

    // Scalar multiplication: Multiplies each element of the vector by a scalar value
    Vector Vector::operator*(double mult) const {
        std::vector<double> result(values.size());
        for (size_t i = 0; i < values.size(); i++) {
            result[i] = values[i] * mult;
        }
        return Vector(result);
    }

    // Function to check if all elements of the vector are zero
    bool Vector::zero() const {
        auto z = [=](const int n) { return this->at(n) == 0.0; };

        // Iterate through all elements of the vector
        for (int i = 0; i < this->size(); ++i) {
            if (!z(i)) {
                return false;  // If any element is not zero, return false
            }
        }
        return true;  // All elements are zero
    }

    // Function to normalize a vector (i.e., make its length equal to 1)
    Vector Vector::normal() const {
        double len = this->length();
        if (len == 0.0) {
            throw std::invalid_argument("Cannot normalize a zero-length vector.");
        }
        double d = 1.0 / len;  // Calculate the reciprocal of the vector's length
        return *this * d;  // Multiply the vector by the reciprocal to normalize it
    }

    // Function to calculate the dot product of two vectors
    double Vector::dot(const Vector& other) const {
        if (this->size() != other.size()) {
            throw std::invalid_argument("Vectors must be the same size.");
        }

        double result = 0.0;
        for (int i = 0; i < this->size(); ++i) {
            result += this->at(i) * other.at(i);
        }
        return result;
    }

    // Function to calculate the length (magnitude) of a vector
    double Vector::length() const {
        return std::sqrt(this->squared_length());  // Return the square root of the squared length
    }

    // Function to calculate the squared length of a vector (i.e., no square root)
    double Vector::squared_length() const {
        double sum = 0.0;
        for (int i = 0; i < this->size(); ++i) {
            sum += square(at(i));  // Sum of squares of all elements
        }
        return sum;
    }

    // Function to calculate the Euclidean distance between two vectors
    double Vector::distance(const Vector& other) const {
        return std::sqrt(this->squared_distance(other));  // Return the square root of the squared distance
    }

    // Function to calculate the squared distance between two vectors
    double Vector::squared_distance(const Vector& other) const {
        return (*this - other).squared_length();  // The squared distance is the squared length of their difference
    }

    // Output stream operator for debugging
    std::ostream& operator<<(std::ostream& os, const Vector& v) {
        os << "[";
        for (int i = 0; i < v.size(); ++i) {
            if (i > 0) os << ", ";
            os << v.at(i);
        }
        os << "]";
        return os;
    }

    

}


